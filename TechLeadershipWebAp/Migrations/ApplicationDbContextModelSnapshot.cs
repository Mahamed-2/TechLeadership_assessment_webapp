// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechLeadershipWebApp.Data;

#nullable disable

namespace TechLeadershipWebAp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("TechLeadershipWebApp.Models.Alternative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeadershipType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Alternatives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LeadershipType = 0,
                            QuestionId = 1,
                            Text = "Break it down into smaller problems and assign based on expertise"
                        },
                        new
                        {
                            Id = 2,
                            LeadershipType = 1,
                            QuestionId = 1,
                            Text = "Facilitate a team discussion to brainstorm solutions together"
                        },
                        new
                        {
                            Id = 3,
                            LeadershipType = 2,
                            QuestionId = 1,
                            Text = "Design an architectural solution that addresses the root cause"
                        },
                        new
                        {
                            Id = 4,
                            LeadershipType = 3,
                            QuestionId = 1,
                            Text = "Pair up developers to work through the challenge collaboratively"
                        },
                        new
                        {
                            Id = 5,
                            LeadershipType = 4,
                            QuestionId = 1,
                            Text = "Assess impact on timeline and resources, then adjust plans accordingly"
                        },
                        new
                        {
                            Id = 6,
                            LeadershipType = 0,
                            QuestionId = 2,
                            Text = "Review their code and provide specific technical suggestions"
                        },
                        new
                        {
                            Id = 7,
                            LeadershipType = 1,
                            QuestionId = 2,
                            Text = "Check if the task was properly explained and offer support"
                        },
                        new
                        {
                            Id = 8,
                            LeadershipType = 2,
                            QuestionId = 2,
                            Text = "Consider if the architecture or tools are creating unnecessary complexity"
                        },
                        new
                        {
                            Id = 9,
                            LeadershipType = 3,
                            QuestionId = 2,
                            Text = "Schedule pairing sessions to help them learn through hands-on experience"
                        },
                        new
                        {
                            Id = 10,
                            LeadershipType = 4,
                            QuestionId = 2,
                            Text = "Evaluate if the task needs to be reassigned or deadline adjusted"
                        },
                        new
                        {
                            Id = 11,
                            LeadershipType = 0,
                            QuestionId = 3,
                            Text = "Research and present the technical pros and cons of each option"
                        },
                        new
                        {
                            Id = 12,
                            LeadershipType = 1,
                            QuestionId = 3,
                            Text = "Ensure everyone's opinion is heard and guide toward consensus"
                        },
                        new
                        {
                            Id = 13,
                            LeadershipType = 2,
                            QuestionId = 3,
                            Text = "Evaluate how each option fits into the long-term system architecture"
                        },
                        new
                        {
                            Id = 14,
                            LeadershipType = 3,
                            QuestionId = 3,
                            Text = "Help team members understand the learning curve and growth opportunities"
                        },
                        new
                        {
                            Id = 15,
                            LeadershipType = 4,
                            QuestionId = 3,
                            Text = "Analyze timeline, cost, and resource implications of each option"
                        });
                });

            modelBuilder.Entity("TechLeadershipWebApp.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Text = "When your team faces a complex technical challenge, what's your primary approach?"
                        },
                        new
                        {
                            Id = 2,
                            Text = "A junior developer is struggling with a task. How do you respond?"
                        },
                        new
                        {
                            Id = 3,
                            Text = "Your team needs to choose a new technology stack. What's your role?"
                        });
                });

            modelBuilder.Entity("TechLeadershipWebApp.Models.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArchitectScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DominantLeadershipType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Feedback")
                        .HasColumnType("TEXT");

                    b.Property<int>("MentorScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParticipantName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectManagerScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamLeadScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicalLeadScore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("TechLeadershipWebApp.Models.Alternative", b =>
                {
                    b.HasOne("TechLeadershipWebApp.Models.Question", "Question")
                        .WithMany("Alternatives")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TechLeadershipWebApp.Models.Question", b =>
                {
                    b.Navigation("Alternatives");
                });
#pragma warning restore 612, 618
        }
    }
}
