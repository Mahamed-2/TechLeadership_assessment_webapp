@model List<TechLeadershipWebApp.Models.Question>
@{
    ViewData["Title"] = "Tech Leadership Assessment";
}

<div class="container">
    <h1 class="text-center mb-4">Tech Leadership Assessment</h1>
    <p class="lead text-center">Discover your ideal leadership role in fullstack development</p>

    @if (ViewBag.Error != null)
    {
        <div class="alert alert-warning">
            @ViewBag.Error
        </div>
    }

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success">
            @TempData["Success"]
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger">
            @TempData["Error"]
        </div>
    }

    <!-- Admin Controls -->
    <div class="card mb-4">
        <div class="card-header bg-secondary text-white">
            <h5 class="mb-0">Admin Controls</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <a href="@Url.Action("AllResults", "Assessment")" class="btn btn-info btn-lg w-100 mb-2">
                        <i class="fas fa-list me-2"></i>View All Results
                    </a>
                    <p class="text-muted small">View all assessment results stored in the database</p>
                </div>
                <div class="col-md-6">
                    <form action="@Url.Action("DeleteAllResults", "Assessment")" method="post" 
                          onsubmit="return confirm('Are you sure you want to delete ALL results? This action cannot be undone.');">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger btn-lg w-100 mb-2">
                            <i class="fas fa-trash me-2"></i>Delete All Results
                        </button>
                    </form>
                    <p class="text-muted small">Permanently delete all assessment results</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Assessment Form -->
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Take New Assessment</h5>
        </div>
        <div class="card-body">
            <form action="@Url.Action("Submit", "Assessment")" method="post" class="needs-validation" novalidate id="assessmentForm">
                @Html.AntiForgeryToken()
                
                <div class="mb-4">
                    <div class="mb-3">
                        <label for="ParticipantName" class="form-label">Your Name *</label>
                        <input type="text" class="form-control" id="ParticipantName" name="ParticipantName" required>
                        <div class="invalid-feedback">
                            Please enter your name.
                        </div>
                    </div>
                </div>
                
                @for (int i = 0; i < Model.Count; i++)
                {
                    var question = Model[i];
                    <div class="card mb-4 question-card">
                        <div class="card-header">
                            <h5 class="mb-0">Question @(i + 1) of @Model.Count</h5>
                        </div>
                        <div class="card-body">
                            <h6 class="card-title text-primary">@question.Text</h6>
                            
                            <div class="alternatives-container">
                                @foreach (var alternative in question.Alternatives)
                                {
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="radio" 
                                               name="Answers[@question.Id]" 
                                               id="alt_@alternative.Id" 
                                               value="@alternative.Id" required>
                                        <label class="form-check-label" for="alt_@alternative.Id">
                                            @alternative.Text
                                        </label>
                                        <div class="invalid-feedback">
                                            Please select an answer for this question.
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                
                <div class="text-center">
                    <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">
                        <i class="fas fa-paper-plane me-2"></i>Submit Assessment
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Form validation
        (function () {
            'use strict'
            var form = document.getElementById('assessmentForm');
            var submitBtn = document.getElementById('submitBtn');
            
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                    
                    // Scroll to first error
                    var firstError = form.querySelector('.is-invalid');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
                
                form.classList.add('was-validated');
            }, false);

            // Add change event to radio buttons to remove validation when selected
            var radioButtons = form.querySelectorAll('input[type="radio"]');
            radioButtons.forEach(function(radio) {
                radio.addEventListener('change', function() {
                    var questionCard = this.closest('.question-card');
                    var radiosInQuestion = questionCard.querySelectorAll('input[type="radio"]');
                    
                    // Remove invalid styling from all radios in this question
                    radiosInQuestion.forEach(function(rb) {
                        rb.classList.remove('is-invalid');
                    });
                    
                    // Add valid styling to the selected one
                    this.classList.add('is-valid');
                });
            });

        })();

        // Show loading state on submit
        document.getElementById('assessmentForm').addEventListener('submit', function() {
            var submitBtn = document.getElementById('submitBtn');
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
            submitBtn.disabled = true;
        });
    </script>
}